package sample.entities;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class Products extends BaseTable implements TableOperations {

    public Products() throws SQLException, ClassNotFoundException {
        super("products");
    }

    @Override
    public void createTable() throws SQLException, ClassNotFoundException {
        super.executeSqlStatement("CREATE TABLE IF NOT EXISTS products(" +
                "    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
                "    name character varying(150) NOT NULL," +
                "    provider integer NOT NULL," +
                "    category integer NOT NULL," +
                "    disk character varying(1) NOT NULL, " +
                "    price numeric(10,2) NOT NULL," +
                "    memory numeric(50,2) NOT NULL," +
                "    ram integer NOT NULL," +
                "    videocard integer NOT NULL," +
                "    windows character varying(10) NOT NULL," +
                "CONSTRAINT fk_category FOREIGN KEY (category)" +
                "    REFERENCES public.categories (id) MATCH SIMPLE, " +
                "    CONSTRAINT fk_provider FOREIGN KEY (provider)" +
                "    REFERENCES public.providers (id) MATCH SIMPLE);", "Обновлена таблица " + tableName);
    }

    public void addProduct(String name, long providerId, long categoryId, String disk, double price, double memory, int ram, int videocard, String windows, double cpu_frquency) throws SQLException, ClassNotFoundException {
        reopenConnection();
        String sql = "INSERT INTO products (name, provider, category, disk, price, memory, ram, videocard, windows, cpu_frequency) VALUES (?,?,?,?,?,?,?,?,?,?);";
        PreparedStatement ps = connection.prepareStatement(sql);
        ps.setString(1, name);
        ps.setLong(2, providerId);
        ps.setLong(3, categoryId);
        ps.setString(4, disk);
        ps.setDouble(5, price);
        ps.setDouble(6, memory);
        ps.setInt(7, ram);
        ps.setInt(8, videocard);
        ps.setString(9, windows);
        ps.setDouble(10, cpu_frquency);
        ps.executeUpdate();
        connection.close();
        System.out.println("Добавлено!");
    }

    public long findIdByName(String name) throws SQLException, ClassNotFoundException {
        reopenConnection();
        PreparedStatement ps = connection.prepareStatement("SELECT * FROM products WHERE \"name\" = ?;");
        ps.setString(1, name);
        ResultSet result = ps.executeQuery();
        long providerId = 0;
        while (result.next()) {
            providerId = result.getLong("id");
        }
        return providerId;
    }

    public String findNamebyId(long id) throws SQLException, ClassNotFoundException {
        reopenConnection();
        PreparedStatement ps = connection.prepareStatement("SELECT * FROM products WHERE \"id\" = ?;");
        ps.setLong(1, id);
        ResultSet result = ps.executeQuery();
        String provider = null;
        while (result.next()) {
            provider = result.getString("name");
        }
        return provider;
    }

    public ResultSet selectNameProviderCategory(String name, long category, long provider) throws SQLException, ClassNotFoundException {
        long id = findIdByName(name);
        PreparedStatement ps = connection.prepareStatement("SELECT * FROM products WHERE (name,category,provider) = (?,?,?) ;");
        ps.setString(1, name);
        ps.setLong(2, category);
        ps.setLong(3, provider);

        ResultSet res = ps.executeQuery();
        return res;
    }

    public ResultSet selectWhere(String name, long provider_id, long category_id, String disk, String price, String memory, String ram, String videocard, String windows, String cpu_frequency){
        try {
            String sql = "SELECT * FROM products WHERE ";
            if (name.length() > 0)
                sql += " lower(name) = lower(\'" + name + "\')" + " AND ";
            if (provider_id != 0)
                sql += " provider = \'" + provider_id + "\'" + " AND ";
            if (category_id != 0)
                sql += " category = \'" + category_id + "\'" + " AND ";
            if (disk.length() > 0)
                sql += " lower(disk) = lower(\'" + disk + "\')" + " AND ";
            if (price.length() > 0)
                sql += " price = \'" + price + "\'" + " AND ";
            if (memory.length() > 0)
                sql += " memory = \'" + memory + "\'" + " AND ";
            if (ram.length() > 0)
                sql += " ram = \'" + ram + "\'" + " AND ";
            if (videocard.length() > 0)
                sql += " videocard = \'" + videocard + "\'" + " AND ";
            if (windows.length() > 0)
                sql += " windows = \'" + windows + "\'" + " AND ";
            if (cpu_frequency.length() > 0)
                sql += " cpu_frequency = '" + cpu_frequency + "'"+" AND ";
            sql = sql.substring(0, sql.lastIndexOf("AND"));

            sql += " ;";

            PreparedStatement ps = connection.prepareStatement(sql);
            ResultSet res = ps.executeQuery();
            return res;
        } catch (SQLException e) {
            return null;
        }
    }

}
